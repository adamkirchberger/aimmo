apiVersion: 'allocation.agones.dev/v1'
kind: GameServerAllocation
metadata:
  generateName: game-allocation-
spec:
  # GameServer selector from which to choose GameServers from.
  # GameServers still have the hard requirement to be `Ready` to be allocated from
  # however we can also make available `matchExpressions` for even greater
  # flexibility.
  # Below is an example of a GameServer allocated against a given fleet.
  # See: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more details
  required:
    matchLabels:
      agones.dev/fleet: aimmo-game
    # matchExpressions:
    #   - {key: tier, operator: In, values: [cache]}
  # ordered list of preferred allocations out of the `required` set.
  # If the first selector is not matched, the selection attempts the second selector, and so on.
  # This is useful for things like smoke testing of new game servers.
  # This also support `matchExpressions`
  # preferred:
  #   - matchLabels:
  #       agones.dev/fleet: green-fleet
  #   - matchLabels:
  #       agones.dev/fleet: blue-fleet
  # defines how GameServers are organised across the cluster.
  # Options include:
  # "Packed" (default) is aimed at dynamic Kubernetes clusters, such as cloud providers, wherein we want to bin pack
  # resources
  # "Distributed" is aimed at static Kubernetes clusters, wherein we want to distribute resources across the entire
  # cluster
  scheduling: Packed
  # Optional custom metadata that is added to the game server at allocation
  # You can use this to tell the server necessary session data
  metadata:
    labels:
      'game-id': '101'
      'worksheet-id': '1'
    annotations:
      'game-api-url': 'https://dev-dot-decent-digit-629.appspot.com:8000/kurono/api/games/101/'
